// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/22/2023 01:10:36"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Maquina_de_refri
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Maquina_de_refri_vlg_sample_tst(
	b1,
	b2,
	clk,
	m,
	r1,
	r2,
	rst,
	V,
	sampler_tx
);
input  b1;
input  b2;
input  clk;
input  m;
input [7:0] r1;
input [7:0] r2;
input  rst;
input [7:0] V;
output sampler_tx;

reg sample;
time current_time;
always @(b1 or b2 or clk or m or r1 or r2 or rst or V)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Maquina_de_refri_vlg_check_tst (
	f1,
	f2,
	K,
	tot,
	vt,
	sampler_rx
);
input  f1;
input  f2;
input [1:0] K;
input [7:0] tot;
input [7:0] vt;
input sampler_rx;

reg  f1_expected;
reg  f2_expected;
reg [1:0] K_expected;
reg [7:0] tot_expected;
reg [7:0] vt_expected;

reg  f1_prev;
reg  f2_prev;
reg [1:0] K_prev;
reg [7:0] tot_prev;
reg [7:0] vt_prev;

reg  f1_expected_prev;
reg  f2_expected_prev;
reg [7:0] tot_expected_prev;
reg [7:0] vt_expected_prev;

reg  last_f1_exp;
reg  last_f2_exp;
reg [7:0] last_tot_exp;
reg [7:0] last_vt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	f1_prev = f1;
	f2_prev = f2;
	K_prev = K;
	tot_prev = tot;
	vt_prev = vt;
end

// update expected /o prevs

always @(trigger)
begin
	f1_expected_prev = f1_expected;
	f2_expected_prev = f2_expected;
	tot_expected_prev = tot_expected;
	vt_expected_prev = vt_expected;
end


// expected tot[ 7 ]
initial
begin
	tot_expected[7] = 1'b0;
end 
// expected tot[ 6 ]
initial
begin
	tot_expected[6] = 1'b0;
end 
// expected tot[ 5 ]
initial
begin
	tot_expected[5] = 1'b0;
end 
// expected tot[ 4 ]
initial
begin
	tot_expected[4] = 1'b0;
end 
// expected tot[ 3 ]
initial
begin
	tot_expected[3] = 1'b0;
end 
// expected tot[ 2 ]
initial
begin
	tot_expected[2] = 1'b0;
end 
// expected tot[ 1 ]
initial
begin
	tot_expected[1] = 1'b0;
end 
// expected tot[ 0 ]
initial
begin
	tot_expected[0] = 1'b0;
end 
// expected vt[ 7 ]
initial
begin
	vt_expected[7] = 1'b0;
end 
// expected vt[ 6 ]
initial
begin
	vt_expected[6] = 1'b0;
end 
// expected vt[ 5 ]
initial
begin
	vt_expected[5] = 1'b0;
end 
// expected vt[ 4 ]
initial
begin
	vt_expected[4] = 1'b0;
end 
// expected vt[ 3 ]
initial
begin
	vt_expected[3] = 1'b0;
end 
// expected vt[ 2 ]
initial
begin
	vt_expected[2] = 1'b0;
end 
// expected vt[ 1 ]
initial
begin
	vt_expected[1] = 1'b0;
end 
// expected vt[ 0 ]
initial
begin
	vt_expected[0] = 1'b0;
end 

// expected f1
initial
begin
	f1_expected = 1'bX;
end 

// expected f2
initial
begin
	f2_expected = 1'bX;
end 
// generate trigger
always @(f1_expected or f1 or f2_expected or f2 or K_expected or K or tot_expected or tot or vt_expected or vt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected f1 = %b | expected f2 = %b | expected K = %b | expected tot = %b | expected vt = %b | ",f1_expected_prev,f2_expected_prev,K_expected_prev,tot_expected_prev,vt_expected_prev);
	$display("| real f1 = %b | real f2 = %b | real K = %b | real tot = %b | real vt = %b | ",f1_prev,f2_prev,K_prev,tot_prev,vt_prev);
`endif
	if (
		( f1_expected_prev !== 1'bx ) && ( f1_prev !== f1_expected_prev )
		&& ((f1_expected_prev !== last_f1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f1_expected_prev);
		$display ("     Real value = %b", f1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_f1_exp = f1_expected_prev;
	end
	if (
		( f2_expected_prev !== 1'bx ) && ( f2_prev !== f2_expected_prev )
		&& ((f2_expected_prev !== last_f2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f2_expected_prev);
		$display ("     Real value = %b", f2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_f2_exp = f2_expected_prev;
	end
	if (
		( tot_expected_prev[0] !== 1'bx ) && ( tot_prev[0] !== tot_expected_prev[0] )
		&& ((tot_expected_prev[0] !== last_tot_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tot[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tot_expected_prev);
		$display ("     Real value = %b", tot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tot_exp[0] = tot_expected_prev[0];
	end
	if (
		( tot_expected_prev[1] !== 1'bx ) && ( tot_prev[1] !== tot_expected_prev[1] )
		&& ((tot_expected_prev[1] !== last_tot_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tot[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tot_expected_prev);
		$display ("     Real value = %b", tot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tot_exp[1] = tot_expected_prev[1];
	end
	if (
		( tot_expected_prev[2] !== 1'bx ) && ( tot_prev[2] !== tot_expected_prev[2] )
		&& ((tot_expected_prev[2] !== last_tot_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tot[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tot_expected_prev);
		$display ("     Real value = %b", tot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tot_exp[2] = tot_expected_prev[2];
	end
	if (
		( tot_expected_prev[3] !== 1'bx ) && ( tot_prev[3] !== tot_expected_prev[3] )
		&& ((tot_expected_prev[3] !== last_tot_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tot[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tot_expected_prev);
		$display ("     Real value = %b", tot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tot_exp[3] = tot_expected_prev[3];
	end
	if (
		( tot_expected_prev[4] !== 1'bx ) && ( tot_prev[4] !== tot_expected_prev[4] )
		&& ((tot_expected_prev[4] !== last_tot_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tot[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tot_expected_prev);
		$display ("     Real value = %b", tot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tot_exp[4] = tot_expected_prev[4];
	end
	if (
		( tot_expected_prev[5] !== 1'bx ) && ( tot_prev[5] !== tot_expected_prev[5] )
		&& ((tot_expected_prev[5] !== last_tot_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tot[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tot_expected_prev);
		$display ("     Real value = %b", tot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tot_exp[5] = tot_expected_prev[5];
	end
	if (
		( tot_expected_prev[6] !== 1'bx ) && ( tot_prev[6] !== tot_expected_prev[6] )
		&& ((tot_expected_prev[6] !== last_tot_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tot[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tot_expected_prev);
		$display ("     Real value = %b", tot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tot_exp[6] = tot_expected_prev[6];
	end
	if (
		( tot_expected_prev[7] !== 1'bx ) && ( tot_prev[7] !== tot_expected_prev[7] )
		&& ((tot_expected_prev[7] !== last_tot_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port tot[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", tot_expected_prev);
		$display ("     Real value = %b", tot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_tot_exp[7] = tot_expected_prev[7];
	end
	if (
		( vt_expected_prev[0] !== 1'bx ) && ( vt_prev[0] !== vt_expected_prev[0] )
		&& ((vt_expected_prev[0] !== last_vt_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vt_expected_prev);
		$display ("     Real value = %b", vt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vt_exp[0] = vt_expected_prev[0];
	end
	if (
		( vt_expected_prev[1] !== 1'bx ) && ( vt_prev[1] !== vt_expected_prev[1] )
		&& ((vt_expected_prev[1] !== last_vt_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vt_expected_prev);
		$display ("     Real value = %b", vt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vt_exp[1] = vt_expected_prev[1];
	end
	if (
		( vt_expected_prev[2] !== 1'bx ) && ( vt_prev[2] !== vt_expected_prev[2] )
		&& ((vt_expected_prev[2] !== last_vt_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vt_expected_prev);
		$display ("     Real value = %b", vt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vt_exp[2] = vt_expected_prev[2];
	end
	if (
		( vt_expected_prev[3] !== 1'bx ) && ( vt_prev[3] !== vt_expected_prev[3] )
		&& ((vt_expected_prev[3] !== last_vt_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vt_expected_prev);
		$display ("     Real value = %b", vt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vt_exp[3] = vt_expected_prev[3];
	end
	if (
		( vt_expected_prev[4] !== 1'bx ) && ( vt_prev[4] !== vt_expected_prev[4] )
		&& ((vt_expected_prev[4] !== last_vt_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vt_expected_prev);
		$display ("     Real value = %b", vt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vt_exp[4] = vt_expected_prev[4];
	end
	if (
		( vt_expected_prev[5] !== 1'bx ) && ( vt_prev[5] !== vt_expected_prev[5] )
		&& ((vt_expected_prev[5] !== last_vt_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vt_expected_prev);
		$display ("     Real value = %b", vt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vt_exp[5] = vt_expected_prev[5];
	end
	if (
		( vt_expected_prev[6] !== 1'bx ) && ( vt_prev[6] !== vt_expected_prev[6] )
		&& ((vt_expected_prev[6] !== last_vt_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vt_expected_prev);
		$display ("     Real value = %b", vt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vt_exp[6] = vt_expected_prev[6];
	end
	if (
		( vt_expected_prev[7] !== 1'bx ) && ( vt_prev[7] !== vt_expected_prev[7] )
		&& ((vt_expected_prev[7] !== last_vt_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vt_expected_prev);
		$display ("     Real value = %b", vt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vt_exp[7] = vt_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Maquina_de_refri_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b1;
reg b2;
reg clk;
reg m;
reg [7:0] r1;
reg [7:0] r2;
reg rst;
reg [7:0] V;
// wires                                               
wire f1;
wire f2;
wire [1:0] K;
wire [7:0] tot;
wire [7:0] vt;

wire sampler;                             

// assign statements (if any)                          
Maquina_de_refri i1 (
// port map - connection between master ports and signals/registers   
	.b1(b1),
	.b2(b2),
	.clk(clk),
	.f1(f1),
	.f2(f2),
	.K(K),
	.m(m),
	.r1(r1),
	.r2(r2),
	.rst(rst),
	.tot(tot),
	.V(V),
	.vt(vt)
);
// r1[ 7 ]
initial
begin
	r1[7] = 1'b0;
end 
// r1[ 6 ]
initial
begin
	r1[6] = 1'b0;
end 
// r1[ 5 ]
initial
begin
	r1[5] = 1'b1;
end 
// r1[ 4 ]
initial
begin
	r1[4] = 1'b1;
end 
// r1[ 3 ]
initial
begin
	r1[3] = 1'b0;
end 
// r1[ 2 ]
initial
begin
	r1[2] = 1'b0;
end 
// r1[ 1 ]
initial
begin
	r1[1] = 1'b1;
end 
// r1[ 0 ]
initial
begin
	r1[0] = 1'b0;
end 
// r2[ 7 ]
initial
begin
	r2[7] = 1'b0;
end 
// r2[ 6 ]
initial
begin
	r2[6] = 1'b1;
end 
// r2[ 5 ]
initial
begin
	r2[5] = 1'b1;
end 
// r2[ 4 ]
initial
begin
	r2[4] = 1'b0;
end 
// r2[ 3 ]
initial
begin
	r2[3] = 1'b0;
end 
// r2[ 2 ]
initial
begin
	r2[2] = 1'b1;
end 
// r2[ 1 ]
initial
begin
	r2[1] = 1'b0;
end 
// r2[ 0 ]
initial
begin
	r2[0] = 1'b0;
end 

// b1
initial
begin
	b1 = 1'b1;
end 

// b2
initial
begin
	b2 = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
// V[ 7 ]
initial
begin
	V[7] = 1'b0;
end 
// V[ 6 ]
initial
begin
	V[6] = 1'b0;
	V[6] = #120000 1'b1;
	V[6] = #20000 1'b0;
end 
// V[ 5 ]
initial
begin
	V[5] = 1'b0;
end 
// V[ 4 ]
initial
begin
	V[4] = 1'b0;
	V[4] = #10000 1'b1;
	V[4] = #30000 1'b0;
	V[4] = #80000 1'b1;
	V[4] = #20000 1'b0;
end 
// V[ 3 ]
initial
begin
	V[3] = 1'b0;
	V[3] = #10000 1'b1;
	V[3] = #30000 1'b0;
end 
// V[ 2 ]
initial
begin
	V[2] = 1'b0;
end 
// V[ 1 ]
initial
begin
	V[1] = 1'b0;
end 
// V[ 0 ]
initial
begin
	V[0] = 1'b0;
	V[0] = #10000 1'b1;
	V[0] = #30000 1'b0;
end 

// m
initial
begin
	m = 1'b1;
end 

// rst
initial
begin
	rst = 1'b1;
end 

Maquina_de_refri_vlg_sample_tst tb_sample (
	.b1(b1),
	.b2(b2),
	.clk(clk),
	.m(m),
	.r1(r1),
	.r2(r2),
	.rst(rst),
	.V(V),
	.sampler_tx(sampler)
);

Maquina_de_refri_vlg_check_tst tb_out(
	.f1(f1),
	.f2(f2),
	.K(K),
	.tot(tot),
	.vt(vt),
	.sampler_rx(sampler)
);
endmodule

